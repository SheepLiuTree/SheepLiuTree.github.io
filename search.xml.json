[{"title":"QML学习笔记(三)","url":"/2022/07/21/QML/QML学习笔记(三)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## QML的布局\n　　元素是以其**父对象**的左上角为基点,分别向左和向下进行延伸,可使用 `x:` 及 `y:` 进行位置的定义  \n　　`Z: ` 是对堆叠顺序进行定义,数字越大越靠顶部\n```QML\nWindow {\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n    Rectangle {             //定义一个矩形\n        id: rect0           //定义ID\n        x: 50               //定义x位置,相对于Window\n        y: 30               //定义x位置,相对于Window\n        width:100           //定义宽度\n        height: 100         //定义高度\n        border.width: 2     //定义边框宽度\n\n        Rectangle{          //定义一个矩形\n            id:rect1        //定义ID\n            x: 0            //定义x位置,相对于rect0\n            y: 0            //定义y位置,相对于rect0\n            z: 1            //定义堆叠顺序\n            width: 40\n            height: 40\n            color: \"red\"    //定义颜色\n        }\n        Rectangle{          //定义一个矩形\n            id:rect2        //定义ID\n            x: 20           //定义x位置,相对于rect0\n            y: 20           //定义x位置,相对于rect0\n            z: 0            //定义堆叠顺序\n            width: 40\n            height: 40\n            color: \"green\"  //定义颜色\n        }\n    }\n}\n```\n![QML的布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/QML的布局.png)","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(二)","url":"/2022/07/21/QML/QML学习笔记(二)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## QML的信号与槽\n　　以Button为例,其信号函数在其父类中定义  \n![Button的信号函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的信号函数.png)\n　　槽函数的格式为，信号函数前加`on`且第一个字母大写,例:`clicked()`的槽函数为`onClicked:{  }`\n```QML\nimport QtQuick 2.14\nimport QtQuick.Window 2.14\nimport QtQuick.Controls\nimport QtQuick.Layouts\n\nWindow {\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n        Button {                    //定义一个按钮\n            id: btn1                //按钮的ID\n            width: 60               //按钮的宽度\n            height: 30              //按钮的高度\n            text: \"Ok\"\n            //clicked()信号的槽函数\n            onClicked: {            //按钮按下触发的槽函数\n                console.log('btn click')//打印信息\n            }\n        }\n}\n```\n![Button的信号与槽](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的信号与槽.png)\n## 控件的属性\n　　以`Button`为例,其属性函数在其父类中定义  \n![Button的属性函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的属性函数.png)\n　　基本上每一个属性函数都有一个槽函数与之对应的变化的信号,例:`text`属性的变化信号为`textChanged`,对应的槽函数为`onTextChanged:{  }`  \n　　但是Qt文档里并没有提到这一点\n```QML\nonTextChanged: {                            //当text被改变时触发的槽函数\n                console.log('btn text',text)//打印被改变后的文字\n            }\n\n            //clicked()信号的槽函数\n            onClicked: {\n                console.log('btn click')\n                text = 'change'             //将text变为'change'\n            }\n```\n![Button属性的槽函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button属性的槽函数.png)\n## 只读属性\n　　在属性中存在一种只读属性`only-read`,这种属性只能读取不能更改  \n　　例:`pressed:bool`，该属性保存按钮是否被物理按下。按钮可以通过触摸或按键事件来按下\n","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(一)","url":"/2022/07/21/QML/QML学习笔记(一)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n\n ## 创建一个QML工程\n\n　　创建QML工程时，选择创建Qt Quick项目\n\n![　](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721131856526.png \"创建工程界面\")\n\n## 可视与不可视元素\n\n　　使用控件前需要导入对应的模块，例如：需要使用 Controls 控件在手册内寻找其对应模块，并引入模块\n\n![引入模块](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721142837460.png)\n\n![手册中控件对应的模块](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721143204201.png)\n　　可视元素为可以看到的元素，如：Button、Label  \n　　不可视元素为不可以看到的元素，如：Layout、RowLayout\n```QML\n  RowLayout {                           //不可视元素,竖排列\n        Button {                        //定义一个按钮\n            text: \"Ok\"                  //定义按钮的文字\n            onClicked: model.submit()   //定义按钮点击后触发效果\n        }\n        Button {                        //定义一个按钮\n            text: \"Cancel\"              //定义按钮的文字\n            onClicked: model.revert()   //定义按钮点击后触发效果\n        }\n    }\n    ColumnLayout{                       //不可视元素,横排列\n         x: 150                         //设置横排列的坐标\n         \n         Button {\n            text: \"Ok\"\n            onClicked: model.submit()\n        }\n         Button {\n            text: \"Cancel\"\n            onClicked: model.revert()\n        }\n    }\n```\n![可视与不可视元素](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/元素可视与不可视.png)","tags":["Qt","QML","笔记"],"categories":["Qt"]}]