[{"title":"QML学习笔记(五)","url":"/2022/07/25/QML/QML学习笔记(五)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## CheckBox\n### 一、描述\nCheckBox 提供了复选框按钮，可以打开（选中）或关闭（未选中）。复选框通常用于从一组选项中选择一个或多个选项。对于更大的选项集，例如列表中的选项，请考虑改用 `CheckDelegate`。\n\n默认只有选中和未选中状态,除此之外，还有第三种状态：部分选中。可以使用 `tristate` 属性启用部分选中状态。\n### 二、属性成员\n1. `checkState` : enumeration\n> 复选框的选中状态。\n>+ Qt.Unchecked：未选中。\n>+ Qt.PartiallyChecked：部分选中。仅在启用三态时使用。\n>+ Qt.Checked：已选中。\n\n1. `nextCheckState` : function\n> 此属性包含一个回调函数，每当用户通过触摸、鼠标或键盘交互切换复选框时，都会调用该函数以**确定下一个选中状态**。\n> \n> 默认情况下，普通复选框在 `Qt.Unchecked` 和 `Qt.Checked` 状态之间循环，三态复选框在 `Qt.Unchecked`、`Qt.PartiallyChecked` 和 `Qt.Checked` 状态之间循环。\n### 三、CheckBox示例\n```QML\nimport QtQuick\nimport QtQuick.Controls\n \nWindow {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr(\"Hello World\")\n \n    CheckBox {\n        id: control\n        text: qsTr(\"CheckBox\")\n        checked: true\n        hoverEnabled: false\n \n        indicator: Rectangle {\n            implicitWidth: 26\n            implicitHeight: 26\n            x: control.leftPadding\n            y: parent.height / 2 - height / 2\n            radius: 3\n            border.color: control.down ? \"#17a81a\" : \"#21be2b\"\n \n            Rectangle {\n                width: 14\n                height: 14\n                x: 6\n                y: 6\n                radius: 2\n                color: control.down ? \"#17a81a\" : \"#21be2b\"\n                visible: control.checked\n            }\n        }\n \n        contentItem: Text {\n            text: control.text\n            font: control.font\n            opacity: enabled ? 1.0 : 0.3\n            color: control.down ? \"#17a81a\" : \"#21be2b\"\n            verticalAlignment: Text.AlignVCenter\n            leftPadding: control.indicator.width + control.spacing\n        }\n    }\n}\n```\n![CheckBox示例](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/CheckBox示例.gif)\n## Calendar\n","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(四)","url":"/2022/07/24/QML/QML学习笔记(四)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## Qt中的基本类型\n### 基本类型如下表\n|类型|含义|\n|:---:|:---|\n|bool|二进制true / false值|\n|double|带有小数点的数字，以双精度存储|\n|enumeration|命名的枚举值|\n|int|整数，如0、10或-20|\n|list|QML对象列表|\n|real|带小数点的数|\n|string|自由格式的文本字符串|\n|url|资源定位器|\n|var|通用的属性类型|\n### QML模块提供的部分基本类型\n|类型|含义|\n|:---:|:---|\n|color|颜色类型值|\n|date|时间类型值|\n|font|字体类型值|\n|point|值带有x和y属性|\n|rect|值与x, y，宽度和高度属性|\n|size|值，该值具有宽度和高度属性|\n## 基本类型变量的动态绑定\n```QML\nWindow {\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n    Item {\n        anchors.fill: parent\n        id:root\n\n        property int number: parent.width  //定义变量等与窗口宽度\n        onNumberChanged:{                  //窗口变化,变量改变,触发槽函数\n            console.log('number',number)\n        }\n    }\n}\n```\n## 别名\n```QML\nWindow {\n    id : window\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n    Item {\n        anchors.fill: parent\n        id:root\n\n        property alias windowWidth: window.width  //使用别名windowWidth代替window.width\n\n        Component.onCompleted: {\n            windowWidth=100       //使用windowWidth可以控制窗口宽度\n        }\n    }\n}\n```","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(三)","url":"/2022/07/21/QML/QML学习笔记(三)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## QML的布局\n　　元素是以其**父对象**的左上角为基点,分别向左和向下进行延伸,可使用 `x:` 及 `y:` 进行位置的定义  \n　　`Z: ` 是对堆叠顺序进行定义,数字越大越靠顶部\n```QML\nWindow {\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n    Rectangle {             //定义一个矩形\n        id: rect0           //定义ID\n        x: 50               //定义x位置,相对于Window\n        y: 30               //定义x位置,相对于Window\n        width:100           //定义宽度\n        height: 100         //定义高度\n        border.width: 2     //定义边框宽度\n\n        Rectangle{          //定义一个矩形\n            id:rect1        //定义ID\n            x: 0            //定义x位置,相对于rect0\n            y: 0            //定义y位置,相对于rect0\n            z: 1            //定义堆叠顺序\n            width: 40\n            height: 40\n            color: \"red\"    //定义颜色\n                 }\n        Rectangle{          //定义一个矩形\n            id:rect2        //定义ID\n            x: 20           //定义x位置,相对于rect0\n            y: 20           //定义x位置,相对于rect0\n            z: 0            //定义堆叠顺序\n            width: 40\n            height: 40\n            color: \"green\"  //定义颜色\n                }\n             }\n}\n```\n![QML的布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/QML的布局.png)\n## 动态表达式绑定\n　　当`B`对象属性调用了`A`对象的属性，那么当`A`的属性变化时，`B`的属性会自动随之变化\n```QML\nRectangle{\n    id:rect1\n    x: 0\n    y: 0\n    width: 40\n    height: 40\n    color: \"red\"\n        }\nRectangle{\n    id:rect2\n    x: rect1.x              //采用rect1的x值\n    y: rect1.y+rect1.height //紧贴rect1的下部\n    width: 40\n    height: 40\n    color: \"green\"\n}\n//鼠标区域\nMouseArea{\n    anchors.fill: rect1 //鼠标锚点\n    drag.target: rect1  //rect1跟随鼠标进行更新\n}\n```\n　　当鼠标移动`rect1`时,`rect2`会自动跟随`rect1`进行移动\n![动态表达式绑定](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/动态表达式绑定.png)\n## 锚点布局\n　　可视组件必须有`宽度` `高度` `x` `y`的值  \n　　如不设定`x` `y`的值,默认为`0`\n```QML\nRectangle{          //没设定x,y和锚点,默认在0,0位置\n    id:rect1\n    width: 40\n    height: 70\n    color: \"red\"\n        }\nRectangle{\n    id:rect2\n    width: 60\n    height: 40\n    color: \"green\"\n    //设置rect2的垂直中心锚点与rect1的垂直中心锚点对齐\n    anchors.verticalCenter: rect1.verticalCenter\n    anchors.left: rect1.right   //设置rect2的左边锚点与rect1的右边锚点对齐\n    anchors.leftMargin: 5       //设置rect2的左外边距5px\n        }\n\nItem {      //不可视元素,不设置默认也会自带一个\n    anchors.fill: parent //设置填充整个窗口\n\n    Rectangle{\n        id: rect3\n        width: 30\n        height: 30\n        color: \"blue\"\n        anchors.right: parent.right//设置rect3的右边锚点与窗口右边锚点对齐\n        anchors.top: parent.top//设置rect3的顶部锚点与窗口顶部锚点对齐\n    }\n}\n```\n![锚点布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/锚点布局.png)\n## 使用锚点代替宽、高设置\n```QML\nItem {\n      anchors.fill: parent\n\n      Rectangle{          //没设定x,y和锚点,默认在0,0位置\n          id:rect1\n          width: parent.width/3\n          height: parent.height\n          color: \"red\"\n             }\n      Rectangle{\n          id:rect2\n          width: parent.width/3\n          height: parent.height\n          color: \"green\"\n          anchors.left: rect1.right\n                }\n      Rectangle{\n          id: rect3\n          color: \"blue\"\n          anchors.right: parent.right //设置rect3的右边锚点与窗口右边锚点对齐\n          anchors.left: rect2.right   //设置rect3的顶部锚点与窗口顶部锚点对齐\n          anchors.top: parent.top     //设置rect3的顶部锚点与rect2顶部锚点对齐\n          anchors.bottom: parent.bottom//设置rect3的底部锚点与窗口底部锚点对齐\n\n              }\n    }\n```\n![锚点代替宽高](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/锚点代替宽高.png)\n## 行、列布局\n　　\n```QML\nItem {\n            anchors.fill: parent\n\n            ColumnLayout{           //列布局\n                id: layout1\n\n                RadioButton{\n                    checked: true\n                    text: '火锅'\n                }\n                RadioButton{\n                    text: '水饺'\n                }\n                RadioButton{\n                    text: '混沌'\n                }\n            }\n            RowLayout{              //行布局\n                id: layout2\n                anchors.left: layout1.right\n                anchors.leftMargin: 30\n                \n                RadioButton{\n                    checked: true\n                    text: '火锅'\n                }\n                RadioButton{\n                    text: '水饺'\n                }\n                RadioButton{\n                    text: '混沌'\n                }\n            }\n        }\n```\n![行、列布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/行、列布局.png)\n## FLOW流式布局\n　　将元素按照顺序依次排列，默认从左向右，元素宽度超过FLOW宽度后，自动向下排列  \n　　可通过｀flow: Flow.TopToBottom｀改变为从上向下\n```QML\nItem {\n        anchors.fill: parent\n        id:root\n\n        Flow {\n            id:flow1\n            anchors.left: parent.left\n            anchors.right: parent.right\n\n            Rectangle {\n                id:rect1\n                width:root.width/2\n                height:100\n                color: 'red'\n            }\n            Rectangle {\n                id:rect2\n                width:root.width/2\n                height:100\n                color: 'green'\n            }\n            Rectangle {\n                id:rect3\n                width:root.width/2\n                height:100\n                color: 'blue'\n            }\n        }\n        Flow {\n            anchors.left: parent.left\n            anchors.right: parent.right\n            anchors.top: flow1.bottom\n            flow: Flow.TopToBottom\n            \n            Rectangle {\n                id:rect4\n                width:root.width/2\n                height:100\n                color: 'red'\n            }\n            Rectangle {\n                id:rect5\n                width:root.width/2\n                height:100\n                color: 'green'\n            }\n        }\n    }\n```\n![flow流式布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/流式布局.png)\n## 网格布局\n　　将元素按照网格方式排列,默认从左向右依次排列,超过设置`列数`后自动向下排列\n```QML\nItem {\n        anchors.fill: parent\n        id:root\n\n        Grid {\n            columns: 3      //设置3列\n            spacing: 2      //设置每个元素之间的间距\n            Rectangle { color: \"red\"; width: 50; height: 50 }\n            Rectangle { color: \"green\"; width: 20; height: 50 }\n            Rectangle { color: \"blue\"; width: 50; height: 20 }\n            Rectangle { color: \"cyan\"; width: 50; height: 50 }\n            Rectangle { color: \"magenta\"; width: 10; height: 10 }\n        }\n    }\n```\n![Grid网格布局](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Grid网格布局.png)","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(二)","url":"/2022/07/21/QML/QML学习笔记(二)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n## QML的信号与槽\n　　以Button为例,其信号函数在其父类中定义  \n![Button的信号函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的信号函数.png)\n　　槽函数的格式为，信号函数前加`on`且第一个字母大写,例:`clicked()`的槽函数为`onClicked:{  }`\n```QML\nimport QtQuick 2.14\nimport QtQuick.Window 2.14\nimport QtQuick.Controls\nimport QtQuick.Layouts\n\nWindow {\n    width: 300\n    height: 300\n    visible: true\n    title: qsTr(\"Hello World\")\n\n        Button {                    //定义一个按钮\n            id: btn1                //按钮的ID\n            width: 60               //按钮的宽度\n            height: 30              //按钮的高度\n            text: \"Ok\"\n            //clicked()信号的槽函数\n            onClicked: {            //按钮按下触发的槽函数\n                console.log('btn click')//打印信息\n            }\n        }\n}\n```\n![Button的信号与槽](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的信号与槽.png)\n## 控件的属性\n　　以`Button`为例,其属性函数在其父类中定义  \n![Button的属性函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button的属性函数.png)\n　　基本上每一个属性函数都有一个槽函数与之对应的变化的信号,例:`text`属性的变化信号为`textChanged`,对应的槽函数为`onTextChanged:{  }`  \n　　但是Qt文档里并没有提到这一点\n```QML\nonTextChanged: {                            //当text被改变时触发的槽函数\n                console.log('btn text',text)//打印被改变后的文字\n            }\n\n            //clicked()信号的槽函数\n            onClicked: {\n                console.log('btn click')\n                text = 'change'             //将text变为'change'\n            }\n```\n![Button属性的槽函数](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/Button属性的槽函数.png)\n## 只读属性\n　　在属性中存在一种只读属性`only-read`,这种属性只能读取不能更改  \n　　例:`pressed:bool`，该属性保存按钮是否被物理按下。按钮可以通过触摸或按键事件来按下\n","tags":["Qt","QML","笔记"],"categories":["Qt"]},{"title":"QML学习笔记(一)","url":"/2022/07/21/QML/QML学习笔记(一)/","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n本篇文章是对来自🤝BiliBili-**清晨与猫鱼**的QML教程的学习笔记，原视频链接👇\nhttps://www.bilibili.com/video/BV1Ay4y1W7xd?spm_id_from=..search-card.all.click&vd_source=4079f59f2068471b4d379822052e0270\n\n{% endnote %}\n\n---\n\n ## 创建一个QML工程\n\n　　创建QML工程时，选择创建Qt Quick项目\n\n![　](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721131856526.png \"创建工程界面\")\n\n## 可视与不可视元素\n\n　　使用控件前需要导入对应的模块，例如：需要使用 Controls 控件在手册内寻找其对应模块，并引入模块\n\n![引入模块](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721142837460.png)\n\n![手册中控件对应的模块](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/image-20220721143204201.png)\n　　可视元素为可以看到的元素，如：Button、Label  \n　　不可视元素为不可以看到的元素，如：Layout、RowLayout\n```QML\n  RowLayout {                           //不可视元素,竖排列\n        Button {                        //定义一个按钮\n            text: \"Ok\"                  //定义按钮的文字\n            onClicked: model.submit()   //定义按钮点击后触发效果\n        }\n        Button {                        //定义一个按钮\n            text: \"Cancel\"              //定义按钮的文字\n            onClicked: model.revert()   //定义按钮点击后触发效果\n        }\n    }\n    ColumnLayout{                       //不可视元素,横排列\n         x: 150                         //设置横排列的坐标\n         \n         Button {\n            text: \"Ok\"\n            onClicked: model.submit()\n        }\n         Button {\n            text: \"Cancel\"\n            onClicked: model.revert()\n        }\n    }\n```\n![可视与不可视元素](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/元素可视与不可视.png)\n## 子元素列表\n```QML\nItem {\n    anchors.fill: parent\n    id:root\n\n   Column {\n       id:cloumn\n\n       Rectangle{\n           width: 30\n           height: 30\n           color: \"red\"\n           property string name: 'rect1'\n       }\n       Rectangle{\n           width: 30\n           height: 30\n           color: \"blue\"\n           property string name: 'rect2'\n\n           Label{               //此项不属于column的子元素\n               text: 'label'\n           }\n       }\n       Component.onCompleted: {\n           console.log(cloumn.children.length)//取cloumn下的子元素个数\n           for(let i=0;i<cloumn.children.length;i++)    \n           {\n               console.log(cloumn.children[i].name)//遍历cloumn下的子元素的name项\n               console.log(cloumn.children[i].color)//遍历cloumn下的子元素的color项\n           }\n       }\n   }\n}\n```\n![子元素列表](https://picgobed.oss-cn-hangzhou.aliyuncs.com/image/子元素列表.png)","tags":["Qt","QML","笔记"],"categories":["Qt"]}]